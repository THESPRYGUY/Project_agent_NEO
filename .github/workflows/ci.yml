name: CI (Unit + Integ/Smoke)

on:
  push:
    branches: [ main, chore/**, feature/** ]
  pull_request:
    branches: [ main ]

jobs:
  sca:
    name: SCA (warn-only)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install Python deps and pip-audit
        run: |
          python -m pip install -U pip
          pip install -e .[dev] pip-audit
      - name: Run pip-audit (JSON)
        run: |
          pip-audit -f json -o sca-pip-audit.json || true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install Node deps
        run: npm ci
      - name: Run npm audit (production)
        run: npm audit --production --json > sca-npm-audit.json || true
      - name: Upload SCA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: |
            sca-pip-audit.json
            sca-npm-audit.json

  unit-python:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -e .[dev] coverage
      - name: Unit tests + coverage
        run: |
          coverage run -m pytest
          coverage report

  unit-js:
    runs-on: ubuntu-latest
    env:
      FAIL_ON_PARITY: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: npm ci
      - run: npm test  # vitest with thresholds

  integ-and-smoke:
    runs-on: ubuntu-latest
    needs: [unit-python, unit-js]
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - run: python -m pip install -U pip && pip install -e .[dev]
      - run: npm ci
      - name: Integration (non-blocking)
        continue-on-error: true
        run: pytest -q -vv -m "integ"
      - name: Golden snapshot (blocking)
        run: pytest -q -vv tests/integ_py/test_golden_snapshot.py
      - name: Smoke (blocking)
        run: python ci/smoke.py
      - name: Upload integrity artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integrity-artifacts
          path: |
            _artifacts/**
            **/INTEGRITY_REPORT.json
            **/build.json
            **/*.zip
      - name: Upload golden diff
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golden-diff
          path: _artifacts/golden-diff/**
      - name: PR summary
        if: always()
        run: |
          echo "### Smoke result" >> $GITHUB_STEP_SUMMARY
          if grep -q "SMOKE OK" _artifacts/**/smoke.log 2>/dev/null; then
            echo "✅ SMOKE OK | files=20 | parity=ALL_TRUE | integrity_errors=0" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Parity failure — see integrity artifacts" >> $GITHUB_STEP_SUMMARY
          fi

  docker-build-smoke:
    runs-on: ubuntu-latest
    needs: [unit-python, unit-js]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build --build-arg GIT_SHA=$(git rev-parse --short HEAD) -t neo-intake-ci:latest .
      - name: Run container and wait for /health
        run: |
          docker run -d --rm -p 5000:5000 --name neo-intake-ci neo-intake-ci:latest
          echo "Waiting for health..."
          for i in {1..30}; do \
            code=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5000/health || true); \
            if [ "$code" = "200" ]; then break; fi; sleep 1; \
          done
          test "$code" = "200"
      - name: Verify headers
        run: |
          curl -sSI http://localhost:5000/health | tee headers.txt
          grep -i "^X-NEO-Intake-Version:" headers.txt
          grep -i "^X-Commit-SHA:" headers.txt
          docker rm -f neo-intake-ci || true
      - name: Upload headers (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-health-headers
          path: headers.txt

  docs-check:
    name: Docs Check (non-blocking)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Run markdownlint via npx
        run: |
          npx --yes markdownlint-cli@0.39.0 "README.md" "OPERATIONS_RUNBOOK.md" "docs/**/*.md" "examples/payloads/README.md" || true
      - name: Save report
        if: always()
        run: |
          echo "Docs check completed at $(date -u +%FT%TZ)" > docs-check.txt
      - name: Upload docs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-check
          path: docs-check.txt
