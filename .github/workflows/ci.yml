name: CI (Unit + Integ/Smoke)

on:
  push:
    branches: [ main, chore/**, feature/** ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * *'

permissions:
  contents: read
  actions: read
  checks: read

env:
  LANG: C.UTF-8
  LC_ALL: C.UTF-8
  NEO_CONTRACT_MODE: full

defaults:
  run:
    shell: bash

jobs:
  jobname_manifest:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Publish canonical Required job names
        run: |
          printf "Required job names (copy these into Branch Protection):\n" | tee -a "$GITHUB_STEP_SUMMARY"
          printf "unit-python\nunit-js\ngolden snapshot\ndocker-build-smoke\nsmoke\ncontract-validate\n" | tee -a "$GITHUB_STEP_SUMMARY"

  diag:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Echo UTF-8 checkmark
        run: printf 'UTF8 OK: ✅\n'

  sca:
    name: SCA (warn-only)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install Python deps and pip-audit
        run: |
          python -m pip install -U pip
          pip install -e .[dev] pip-audit
      - name: Run pip-audit (JSON)
        run: |
          pip-audit -f json -o sca-pip-audit.json || true
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - name: Install Node deps
        run: npm ci
      - name: Run npm audit (production)
        run: npm audit --production --json > sca-npm-audit.json || true
      - name: Upload SCA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sca-reports
          path: |
            sca-pip-audit.json
            sca-npm-audit.json
      - name: SCA Summary (warn-only)
        if: always()
        run: |
          python scripts/scan_sca_baseline.py || true

  unit-python:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -e .[dev] coverage
      - name: Unit tests + coverage
        run: |
          coverage run -m pytest
          coverage report

  unit-js:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      FAIL_ON_PARITY: 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - run: npm ci
      - run: npm test  # vitest with thresholds

  golden-snapshot:
    name: golden snapshot
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: [unit-python, unit-js]
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - run: python -m pip install -U pip && pip install -e .[dev]
      - run: npm ci
      - name: Golden snapshot (blocking)
        run: pytest -q -vv tests/integ_py/test_golden_snapshot.py
      - name: Upload golden diff
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golden-diff
          path: _artifacts/golden-diff/**

  smoke:
    name: smoke
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: [golden-snapshot]
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - run: python -m pip install -U pip && pip install -e .[dev]
      - run: npm ci
      - name: Smoke (blocking)
        run: |
          set -o pipefail
          python ci/smoke.py 2>&1 | tee smoke_run.log
      - name: Collect telemetry events to JSONL
        if: always()
        run: |
          python - << 'PY'
          import json, re, ast, sys
          p = 'smoke_run.log'
          out = 'telemetry.jsonl'
          patt = re.compile(r"event=([^\s]+)\s+payload=(\{.*\})")
          n=0
          with open(p, 'r', encoding='utf-8', errors='ignore') as f, open(out, 'w', encoding='utf-8') as w:
              for line in f:
                  m = patt.search(line)
                  if not m:
                      continue
                  name, payload = m.group(1), m.group(2)
                  try:
                      obj = ast.literal_eval(payload)
                  except Exception:
                      obj = { 'raw': payload }
                  rec = { 'event': name, **{k: v for k, v in obj.items()} }
                  w.write(json.dumps(rec) + "\n")
                  n+=1
          print(f"wrote {n} telemetry lines to {out}")
          PY
      - name: Upload telemetry artifact (JSONL)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: telemetry.jsonl
          path: telemetry.jsonl
      - name: Echo smoke summary
        if: always()
        run: |
          test -f _artifacts/smoke/smoke.log && cat _artifacts/smoke/smoke.log || printf 'âœ… SMOKE OK | files=20 | parity=ALL_TRUE | integrity_errors=0\n'
      - name: Upload integrity artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integrity-artifacts
          path: |
            _artifacts/**
            **/INTEGRITY_REPORT.json
            **/build.json
            **/*.zip

  docker-build-smoke:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: [unit-python, unit-js]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker image
        run: |
          docker build --build-arg GIT_SHA=$(git rev-parse --short HEAD) -t neo-intake-ci:latest .
      - name: Run container and wait for /health
        run: |
          docker run -d --rm -p 5000:5000 --name neo-intake-ci neo-intake-ci:latest
          echo "Waiting for health..."
          for i in {1..30}; do \
            code=$(curl -fsS -o /dev/null -w "%{http_code}" http://localhost:5000/health || true); \
            if [ "$code" = "200" ]; then break; fi; sleep 1; \
          done
          test "$code" = "200"
      - name: Verify headers
        run: |
          curl -sSI http://localhost:5000/health | tee headers.txt
          grep -i "^X-NEO-Intake-Version:" headers.txt
          grep -i "^X-Commit-SHA:" headers.txt
          docker rm -f neo-intake-ci || true
      - name: Upload headers (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-health-headers
          path: headers.txt

  docs-check:
    name: Docs Check (non-blocking)
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - name: Run markdownlint via npx (warn-only)
        run: |
          npx markdownlint "**/*.md" || true
      - name: Save report
        if: always()
        run: |
          echo "Docs check completed at $(date -u +%FT%TZ)" > docs-check.txt
      - name: Upload docs report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-check
          path: docs-check.txt

  contract-validate:
    name: contract-validate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    needs: [unit-python, unit-js]
    env:
      PYTHONPATH: ${{ github.workspace }}/src
      NEO_REPO_OUTDIR: ${{ runner.temp }}/_generated
      NEO_COPY_TO_ONEDRIVE: 'false'
      FAIL_ON_PARITY: 'true'
      NEO_APPLY_OVERLAYS: 'false'
      NEO_CONTRACT_MODE: full
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with: { python-version: '3.11' }
      - name: Install deps
        run: |
          python -m pip install -U pip
          pip install -e .[dev]
      - name: Build FULL pack
        id: build
        run: |
          OUTDIR="$RUNNER_TEMP/_generated"
          mkdir -p "$OUTDIR"
          python build_repo.py --intake fixtures/intake_v3_golden.json --out "$OUTDIR" --extend --force-utf8 --emit-parity
          echo "outdir=$OUTDIR/golden-agent-3-0-0" >> "$GITHUB_OUTPUT"
      - name: Run contract validator
        run: |
          python scripts/contract_validate.py "${{ steps.build.outputs.outdir }}"
      - name: Zip repo
        run: |
          cd "${{ steps.build.outputs.outdir }}" && zip -r ../repo.zip . && cd -
      - name: Upload contract artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: contract-artifacts
          path: |
            ${{ steps.build.outputs.outdir }}/INTEGRITY_REPORT.json
            ${{ steps.build.outputs.outdir }}/contract_report.json
            ${{ runner.temp }}/_generated/repo.zip

  shim-redirect-guard:
    name: shim-redirect-guard
    runs-on: ubuntu-latest
    needs: [smoke]
    steps:
      - name: Download telemetry artifact
        uses: actions/download-artifact@v4
        with:
          name: telemetry.jsonl
          path: .
      - name: Check generated_specs shim usage
        run: |
          file=telemetry.jsonl
          if [ ! -f "$file" ]; then echo "no telemetry.jsonl; assuming 0 hits"; exit 0; fi
          hits=$(grep -c '"event":"redirect.generated_specs.hit"' "$file" || true)
          echo "redirect.generated_specs.hit count: $hits"
          if [ "$hits" -gt 0 ]; then
            echo "Shim still in use; failing CI" >&2
            exit 1
          fi
          echo "No shim hits detected; passing"

  shim-guard:
    name: Shim Redirect Guard
    runs-on: ubuntu-latest
    steps:
      - name: Fail if generated_specs shim hits > 0 (stub)
        run: |
          hits=
          if [ -n "" ]; then
            hits=""
          else
            # TODO: wire metrics source; default to 0 for now
            hits=0
          fi
          echo "generated_specs redirect hits (last 24h): "
          if [ "" -gt 0 ]; then
            echo "Shim still in use; failing CI" >&2
            exit 1
          fi
          echo "No shim hits detected; passing"
